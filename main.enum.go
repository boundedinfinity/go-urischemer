//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Any change will be overwritten                                                   *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package urischemer

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/boundedinfinity/go-commoner/slicer" // v1.0.15
)

var (
	All = []UriScheme{
		Aaa,
		Aaas,
		About,
		Acap,
		Acct,
		Acr,
		Adiumxtra,
		Aft,
		Afs,
		Aim,
		Apt,
		Attachment,
		Aw,
		Amss,
		Barion,
		Beshare,
		Bitcoin,
		Blob,
		Bolo,
		Callto,
		Cap,
		Chrome,
		ChromeExtension,
		ComEventbriteAttendee,
		Cid,
		Coaps,
		Content,
		Crid,
		Cvs,
		Dab,
		Data,
		Dav,
		Dict,
		DlnaPlaySingle,
		DlnaPlayContainer,
		Dns,
		Dntp,
		Doi,
		Drm,
		Dtn,
		Dvb,
		Ed2k,
		Example,
		Facetime,
		Fax,
		Feed,
		File,
		Filesystem,
		Finger,
		Fish,
		Fm,
		Ftp,
		Gemini,
		Geo,
		Gg,
		Git,
		GizmoProject,
		Go,
		Gopher,
		Gtalk,
		H323,
		Http,
		Https,
		Iax,
		Icap,
		Icon,
		Im,
		Imap,
		Info,
		IotDisco,
		Ipn,
		Ipp,
		Ipps,
		Irc,
		Irc6,
		Ircs,
		Iris,
		IrisBeep,
		IrisXpc,
		IrisXpcs,
		IrisLws,
		Itms,
		Jabber,
		Jar,
		Jms,
		Keyparc,
		Lastfm,
		Ldap,
		Ldaps,
		Magnet,
		MailServer,
		Mailto,
		Maps,
		Market,
		Message,
		Mid,
		Mms,
		Modem,
		MsHelp,
		MsSettings,
		MsSettingsAirplanemode,
		MsSettingsBluetooth,
		MsSettingsCamera,
		MsSettingsCellular,
		MsSettingsCloudStorage,
		MsSettingsEmailAndAccounts,
		MsSettingsLanguage,
		MsSettingsLocation,
		MsSettingsLock,
		MsSettingsNfcTransactions,
		MsSettingsNotifications,
		MsSettingsPower,
		MsSettingsPrivacy,
		MsSettingsProximity,
		MsSettingsScreenRotation,
		MsSettingsWifi,
		MsSettingsWorkplace,
		MsnIm,
		Msrp,
		Msrps,
		Mtqp,
		Mumble,
		Mupdate,
		Mvn,
		News,
		Nfs,
		Ni,
		Nih,
		Nntp,
		Oid,
		OpaqueLockToken,
		OpenPgp4Fpr,
		Pack,
		Palm,
		Paparazzi,
		Payto,
		Pkcs11,
		Platform,
		Pop,
		Pres,
		Prospero,
		Proxy,
		Psyc,
		Query,
		Redis,
		Rediss,
		Reload,
		Res,
		Resource,
		Rmi,
		Rsync,
		Rtmfp,
		Rtmp,
		Rtsp,
		S3,
		SecondLife,
		Service,
		Session,
		Sftp,
		Sgn,
		Shc,
		Shttp,
		Sieve,
		Sip,
		Sips,
		Skype,
		Smb,
		Sms,
		Snews,
		Snmp,
		SoapBeep,
		SoapBeeps,
		Soldat,
		Spotify,
		Ssh,
		Steam,
		Stun,
		Stuns,
		Svn,
		Tag,
		TeamSpeak,
		Tel,
		Telnet,
		Tftp,
		Things,
		ThisMessage,
		Tn3270,
		Tip,
		Turn,
		Turns,
		Tv,
		Udp,
		Udp2,
		Unreal,
		Urn,
		Ut2004,
		Vemmi,
		Ventrilo,
		VideoTex,
		ViewSource,
		Vnc,
		Wasi,
		WebCal,
		Ws,
		Wss,
		Wtai,
		Wyciwyg,
		Xcon,
		XconUserId,
		Xfire,
		XmlRpcBeep,
		XmlRpcBeeps,
		Xmpp,
		Xri,
		Ymsgr,
		Z3950,
		Z3950r,
		Z3950ss,
		Admin,
		App,
		Javascript,
		Jdbc,
		MsTeams,
		MsAccess,
		MsExcel,
		MsInfoPath,
		MsPowerPoint,
		MsProject,
		MsPublisher,
		MsSpd,
		MsVisio,
		MsWord,
		Odbc,
		Rdar,
		TrueConf,
		Slack,
		Stratum,
		ZoomMtg,
		ZoomUs,
	}
)

func (t UriScheme) String() string {
	return string(t)
}

func Parse(v string) (UriScheme, error) {
	f, ok := slicer.FindFn(All, func(x UriScheme) bool {
		return UriScheme(v) == x
	})

	if !ok {
		return f, ErrorV(v)
	}

	return f, nil
}

func Is(s string) bool {
	return slicer.ContainsFn(All, func(v UriScheme) bool {
		return string(v) == s
	})
}

var ErrInvalid = errors.New("invalid enumeration type")

func ErrorV(v string) error {
	return fmt.Errorf(
		"%w '%v', must be one of %v",
		ErrInvalid, v, slicer.Join(All, ","),
	)
}

func (t UriScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(t))
}

func (t *UriScheme) UnmarshalJSON(data []byte) error {
	var v string

	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}

	e, err := Parse(v)

	if err != nil {
		return err
	}

	*t = e

	return nil
}

func (t UriScheme) MarshalYAML() (interface{}, error) {
	return string(t), nil
}

func (t *UriScheme) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var v string

	if err := unmarshal(&v); err != nil {
		return err
	}

	e, err := Parse(v)

	if err != nil {
		return err
	}

	*t = e

	return nil
}
